// Wrap: .NET monads for functional style.
// Copyright (c) bfren - licensed under https://mit.bfren.dev/2019

using System;
using System.Threading.Tasks;

namespace Wrap;

public static partial class ResultExtensions
{
	/// <summary>
	/// Unwrap the value contained in <paramref name="this"/>.
	/// </summary>
	/// <remarks>
	/// <para>
	/// Provides access to the value wrapped by a <see cref="Result{T}"/> object.
	/// </para>
	/// <para>
	/// You need to provide a default value via <paramref name="ifNone"/> in case
	/// <paramref name="this"/> is <see cref="Err"/>.
	/// </para>
	/// </remarks>
	/// <typeparam name="T">Result value type.</typeparam>
	/// <param name="this">Result object.</param>
	/// <param name="ifNone">Function to generate a value if <paramref name="this"/> is <see cref="Err"/>.</param>
	/// <returns>The value of <paramref name="this"/> or generated by <paramref name="ifNone"/>.</returns>
	public static T Unwrap<T>(this Result<T> @this, Func<ErrValue, T> ifNone) =>
		R.Match(@this,
			err: ifNone,
			ok: x => x
		);

	/// <inheritdoc cref="Unwrap{T}(Result{T}, Func{ErrValue,T})"/>
	public static Task<T> UnwrapAsync<T>(this Result<T> @this, Func<ErrValue, Task<T>> ifNone) =>
		R.MatchAsync(@this,
			err: ifNone,
			ok: x => x
		);

	/// <inheritdoc cref="Unwrap{T}(Result{T}, Func{ErrValue,T})"/>
	public static Task<T> UnwrapAsync<T>(this Task<Result<T>> @this, Func<ErrValue, T> ifNone) =>
		R.MatchAsync(@this,
			err: ifNone,
			ok: x => Task.FromResult(x)
		);

	/// <inheritdoc cref="Unwrap{T}(Result{T}, Func{ErrValue,T})"/>
	public static Task<T> UnwrapAsync<T>(this Task<Result<T>> @this, Func<ErrValue, Task<T>> ifNone) =>
		R.MatchAsync(@this,
			err: ifNone,
			ok: x => Task.FromResult(x)
		);
}
