// Wrap: .NET monads for functional style.
// Copyright (c) bfren - licensed under https://mit.bfren.dev/2019

using System;
using System.Threading.Tasks;
using Wrap.Exceptions;

namespace Wrap;

public static partial class R
{
	#region Without Return Value

	/// <summary>
	/// Run an action based on the value of <paramref name="result"/>.
	/// </summary>
	/// <remarks>
	/// <para>
	/// It would be possible to achieve the same thing using switch statements, but doing that would add the
	/// potential for not handling both cases (<see cref="Ok{T}"/> and <see cref="Wrap.Fail"/>).
	/// </para>
	/// <para>
	/// This way there has to be a function to handle both cases.
	/// </para>
	/// </remarks>
	/// <typeparam name="T">Ok value type.</typeparam>
	/// <param name="result">Result object.</param>
	/// <param name="fail">Function to run when <paramref name="result"/> is <see cref="Wrap.Fail"/>.</param>
	/// <param name="ok">Function to run when <paramref name="result"/> is <see cref="Ok{T}"/>.</param>
	/// <exception cref="InvalidResultTypeException"></exception>
	/// <exception cref="NullResultException"></exception>
	public static void Match<T>(Result<T> result, Action<FailValue> fail, Action<T> ok)
	{
		Action f = result switch
		{
			Result<T>.Failure x =>
				() => fail(x.Value),

			Ok<T> y =>
				() => ok(y.Value),

			{ } m =>
				throw new InvalidResultTypeException(m.GetType()),

			_ =>
				throw new NullResultException()
		};

		f();
	}

	/// <inheritdoc cref="Match{T}(Result{T}, Action{FailValue}, Action{T})"/>
	public static Task MatchAsync<T>(Result<T> result, Action<FailValue> fail, Func<T, Task> ok) =>
		MatchAsync(result.AsTask(), x => { fail(x); return Task.CompletedTask; }, ok);

	/// <inheritdoc cref="Match{T}(Result{T}, Action{FailValue}, Action{T})"/>
	public static Task MatchAsync<T>(Result<T> result, Func<FailValue, Task> fail, Action<T> ok) =>
		MatchAsync(result.AsTask(), fail, x => { ok(x); return Task.CompletedTask; });

	/// <inheritdoc cref="Match{T}(Result{T}, Action{FailValue}, Action{T})"/>
	public static Task MatchAsync<T>(Result<T> result, Func<FailValue, Task> fail, Func<T, Task> ok) =>
		MatchAsync(result.AsTask(), fail, ok);

	/// <inheritdoc cref="Match{T}(Result{T}, Action{FailValue}, Action{T})"/>
	public static async Task MatchAsync<T>(Task<Result<T>> result, Func<FailValue, Task> fail, Func<T, Task> ok)
	{
		Func<Task> f = await result switch
		{
			Result<T>.Failure x =>
				() => fail(x.Value),

			Ok<T> y =>
				() => ok(y.Value),

			{ } r =>
				throw new InvalidResultTypeException(r.GetType()),

			_ =>
				throw new NullResultException()
		};

		await f();
	}

	#endregion

	#region With Return Value

	/// <summary>
	/// Run a function based on the value of <paramref name="result"/> and return its value.
	/// </summary>
	/// <remarks>
	/// <para>
	/// It would be possible to achieve the same thing using switch statements, but doing that would add the
	/// potential for not handling both cases (<see cref="Ok{T}"/> and <see cref="Wrap.Fail"/>).
	/// </para>
	/// <para>
	/// This way there has to be a function to handle both cases.
	/// </para>
	/// </remarks>
	/// <typeparam name="T">Ok value type.</typeparam>
	/// <typeparam name="TReturn">Return value type.</typeparam>
	/// <param name="result">Result object.</param>
	/// <param name="fail">Function to run when <paramref name="result"/> is <see cref="Wrap.Fail"/>.</param>
	/// <param name="ok">Function to run when <paramref name="result"/> is <see cref="Ok{T}"/>.</param>
	/// <returns>Value generated by either <paramref name="fail"/> or <paramref name="ok"/>.</returns>
	/// <exception cref="InvalidResultTypeException"></exception>
	/// <exception cref="NullResultException"></exception>
	public static TReturn Match<T, TReturn>(Result<T> result, Func<FailValue, TReturn> fail, Func<T, TReturn> ok) =>
		result switch
		{
			Result<T>.Failure x =>
				fail(x.Value),

			Ok<T> y =>
				ok(y.Value),

			{ } r =>
				throw new InvalidResultTypeException(r.GetType()),

			_ =>
				throw new NullResultException()
		};

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Result<T> result, Func<FailValue, TReturn> fail, Func<T, Task<TReturn>> ok) =>
		MatchAsync(result.AsTask(), x => Task.FromResult(fail(x)), ok);

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Result<T> result, Func<FailValue, Task<TReturn>> fail, Func<T, TReturn> ok) =>
		MatchAsync(result.AsTask(), fail, x => Task.FromResult(ok(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Result<T> result, Func<FailValue, Task<TReturn>> fail, Func<T, Task<TReturn>> ok) =>
		MatchAsync(result.AsTask(), fail, ok);

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Result<T>> result, Func<FailValue, TReturn> fail, Func<T, TReturn> ok) =>
		MatchAsync(result, x => Task.FromResult(fail(x)), x => Task.FromResult(ok(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Result<T>> result, Func<FailValue, TReturn> fail, Func<T, Task<TReturn>> ok) =>
		MatchAsync(result, x => Task.FromResult(fail(x)), ok);

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Result<T>> result, Func<FailValue, Task<TReturn>> fail, Func<T, TReturn> ok) =>
		MatchAsync(result, fail, x => Task.FromResult(ok(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Result{T}, Func{FailValue, TReturn}, Func{T, TReturn})"/>
	public static async Task<TReturn> MatchAsync<T, TReturn>(Task<Result<T>> result, Func<FailValue, Task<TReturn>> fail, Func<T, Task<TReturn>> ok) =>
		await Match(await result, fail, ok);

	#endregion
}
