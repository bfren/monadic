// Wrap: .NET monads for functional style.
// Copyright (c) bfren - licensed under https://mit.bfren.dev/2019

using System;
using System.Threading.Tasks;

namespace Wrap;

public static partial class MaybeExtensions
{
	/// <summary>
	/// Return a value determined by the value of <paramref name="this"/> and the result of <paramref name="predicate"/>.
	/// </summary>
	/// <typeparam name="T">Some value type.</typeparam>
	/// <typeparam name="TReturn">Return value type.</typeparam>
	/// <param name="this">Maybe object.</param>
	/// <param name="none">Function to return a value if <paramref name="this"/> is <see cref="None"/>.</param>
	/// <param name="predicate">Uses value of <paramref name="this"/> to determines whether <paramref name="someFalse"/> or <paramref name="someTrue"/> should be used.</param>
	/// <param name="someFalse">Used if <paramref name="this"/> is <see cref="Some{T}"/> and <paramref name="predicate"/> returns <see langword="false"/>.</param>
	/// <param name="someTrue">Used if <paramref name="this"/> is <see cref="Some{T}"/> and <paramref name="predicate"/> returns <see langword="true"/>.</param>
	/// <returns>Value generated by <paramref name="none"/>, <paramref name="someFalse"/> or <paramref name="someTrue"/>.</returns>
	public static TReturn MatchIf<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		Match(@this,
			none: none(),
			some: x => predicate(x) switch
			{
				false =>
					someFalse(x),

				true =>
					someTrue(x)
			}
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: someFalse,
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<TReturn> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(@this,
			none: () => Task.FromResult(none()),
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: predicate,
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Maybe<T> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(Task.FromResult(@this),
			none: none,
			predicate: predicate,
			someFalse: someFalse,
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, bool> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: x => Task.FromResult(predicate(x)),
			someFalse: someFalse,
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, TReturn> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: predicate,
			someFalse: someFalse,
			someTrue: x => Task.FromResult(someTrue(x))
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, TReturn> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchIfAsync(@this,
			none: none,
			predicate: predicate,
			someFalse: x => Task.FromResult(someFalse(x)),
			someTrue: someTrue
		);

	/// <inheritdoc cref="MatchIf{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, bool}, Func{T, TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchIfAsync<T, TReturn>(this Task<Maybe<T>> @this,
		Func<Task<TReturn>> none,
		Func<T, Task<bool>> predicate,
		Func<T, Task<TReturn>> someFalse,
		Func<T, Task<TReturn>> someTrue
	) =>
		MatchAsync(@this,
			none: none,
			some: async x => await predicate(x) switch
			{
				false =>
					await someFalse(x),

				true =>
					await someTrue(x)
			}
		);
}
