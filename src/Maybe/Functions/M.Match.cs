// Wrap: .NET monads for functional style.
// Copyright (c) bfren - licensed under https://mit.bfren.dev/2019

using System;
using System.Threading.Tasks;
using Wrap.Exceptions;

namespace Wrap;

public static partial class M
{
	#region Without Return Value

	/// <summary>
	/// Run an action based on the value of <paramref name="maybe"/>.
	/// </summary>
	/// <remarks>
	/// <para>
	/// It would be possible to achieve the same thing using switch statements, but doing that would add the
	/// potential for not handling both cases (<see cref="Some{T}"/> and <see cref="Wrap.None"/>).
	/// </para>
	/// <para>
	/// This way there has to be a function to handle both cases.
	/// </para>
	/// </remarks>
	/// <typeparam name="T">Some value type.</typeparam>
	/// <param name="maybe">Maybe object.</param>
	/// <param name="none">Function to run when <paramref name="maybe"/> is <see cref="Wrap.None"/>.</param>
	/// <param name="some">Function to run when <paramref name="maybe"/> is <see cref="Some{T}"/>.</param>
	/// <exception cref="InvalidMaybeTypeException"></exception>
	public static void Match<T>(Maybe<T> maybe, Action none, Action<T> some)
	{
		var f = maybe switch
		{
			Maybe<T>.None =>
				none,

			Some<T> x =>
				() => some(x.Value),

			{ } m =>
				throw new InvalidMaybeTypeException(m.GetType()),

			_ =>
				throw new NullMaybeException()
		};

		f();
	}

	/// <inheritdoc cref="Match{T}(Maybe{T}, Action, Action{T})"/>
	public static Task MatchAsync<T>(Maybe<T> maybe, Action none, Func<T, Task> some) =>
		MatchAsync(maybe.AsTask(), () => { none(); return Task.CompletedTask; }, some);

	/// <inheritdoc cref="Match{T}(Maybe{T}, Action, Action{T})"/>
	public static Task MatchAsync<T>(Maybe<T> maybe, Func<Task> none, Action<T> some) =>
		MatchAsync(maybe.AsTask(), none, x => { some(x); return Task.CompletedTask; });

	/// <inheritdoc cref="Match{T}(Maybe{T}, Action, Action{T})"/>
	public static Task MatchAsync<T>(Maybe<T> maybe, Func<Task> none, Func<T, Task> some) =>
		MatchAsync(maybe.AsTask(), none, some);

	/// <inheritdoc cref="Match{T}(Maybe{T}, Action, Action{T})"/>
	public static async Task MatchAsync<T>(Task<Maybe<T>> maybe, Func<Task> none, Func<T, Task> some)
	{
		var f = await maybe switch
		{
			Maybe<T>.None =>
				none,

			Some<T> x =>
				() => some(x.Value),

			{ } m =>
				throw new InvalidMaybeTypeException(m.GetType()),

			_ =>
				throw new NullMaybeException()
		};

		await f();
	}

	#endregion

	#region With Return Value

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static TReturn Match<T, TReturn>(Maybe<T> maybe, TReturn none, Func<T, TReturn> some) =>
		Match(maybe, () => none, some);

	/// <summary>
	/// Run a function based on the value of <paramref name="maybe"/> and return its value.
	/// </summary>
	/// <remarks>
	/// <para>
	/// It would be possible to achieve the same thing using switch statements, but doing that would add the
	/// potential for not handling both cases (<see cref="Some{T}"/> and <see cref="Wrap.None"/>).
	/// </para>
	/// <para>
	/// This way there has to be a function to handle both cases.
	/// </para>
	/// </remarks>
	/// <typeparam name="T">Some value type.</typeparam>
	/// <typeparam name="TReturn">Return value type.</typeparam>
	/// <param name="maybe">Maybe object.</param>
	/// <param name="none">Function to run when <paramref name="maybe"/> is <see cref="Wrap.None"/>.</param>
	/// <param name="some">Function to run when <paramref name="maybe"/> is <see cref="Some{T}"/>.</param>
	/// <returns>Value generated by either <paramref name="none"/> or <paramref name="some"/>.</returns>
	/// <exception cref="InvalidMaybeTypeException"></exception>
	public static TReturn Match<T, TReturn>(Maybe<T> maybe, Func<TReturn> none, Func<T, TReturn> some) =>
		maybe switch
		{
			Maybe<T>.None =>
				none(),

			Some<T> x =>
				some(x.Value),

			{ } m =>
				throw new InvalidMaybeTypeException(m.GetType()),

			_ =>
				throw new NullMaybeException()
		};

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Maybe<T> maybe, TReturn none, Func<T, Task<TReturn>> some) =>
		Match(maybe, () => Task.FromResult(none), some);

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Maybe<T> maybe, Func<TReturn> none, Func<T, Task<TReturn>> some) =>
		Match(maybe, () => Task.FromResult(none()), some);

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Maybe<T> maybe, Func<Task<TReturn>> none, Func<T, TReturn> some) =>
		Match(maybe, none, x => Task.FromResult(some(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Maybe<T> maybe, Func<Task<TReturn>> none, Func<T, Task<TReturn>> some) =>
		Match(maybe, none, some);

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Maybe<T>> maybe, TReturn none, Func<T, TReturn> some) =>
		MatchAsync(maybe, () => Task.FromResult(none), x => Task.FromResult(some(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Maybe<T>> maybe, TReturn none, Func<T, Task<TReturn>> some) =>
		MatchAsync(maybe, () => Task.FromResult(none), some);

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Maybe<T>> maybe, Func<TReturn> none, Func<T, TReturn> some) =>
		MatchAsync(maybe, () => Task.FromResult(none()), x => Task.FromResult(some(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Maybe<T>> maybe, Func<TReturn> none, Func<T, Task<TReturn>> some) =>
		MatchAsync(maybe, () => Task.FromResult(none()), some);

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static Task<TReturn> MatchAsync<T, TReturn>(Task<Maybe<T>> maybe, Func<Task<TReturn>> none, Func<T, TReturn> some) =>
		MatchAsync(maybe, none, x => Task.FromResult(some(x)));

	/// <inheritdoc cref="Match{T, TReturn}(Maybe{T}, Func{TReturn}, Func{T, TReturn})"/>
	public static async Task<TReturn> MatchAsync<T, TReturn>(Task<Maybe<T>> maybe, Func<Task<TReturn>> none, Func<T, Task<TReturn>> some) =>
		await Match(await maybe, none, some);

	#endregion
}
